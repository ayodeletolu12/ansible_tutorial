# How to write ansible play books, just like txt files for config

# Ansible  Playbooks.
#  when we write ansible playbooks. we can define the state we want our servers to be in and the caommands that will bring our servers to that state

# You can use the editor of your choice to write your playbook

# ansible playbook extention format is .yml it is the standard extention for ansible playbook files format they are in the yaml format 

# You begin playbook by typing three dashess. ---

# To begin a playbook statement, you start with a dash -

--- # The begining

- hosts: all
  become: true
  tasks:
    
    - name: Install apache2 package
      apt: 
        name: apache2

# To run the playbook against our servers, you use the ansible binary (ansible-playbook) --ask-become-pass playbookname
ansible-playbook --ask-beome-pass install_apache.yml


The Output will show the following

Change: if 1 it will show the number changes made, if no changes were made, change will be 0

Unreachable: This will show if the server was unreachable because of network or something like that

Failed:

Skipped

Rescued:


# You can have multiple play in a playbook, E.g

--- 

- hosts: name
  become: true
  tasks:

   # Task 1
  - name: update repository index
    apt:
      update_cache: yes

   # Task 2
  - name: install apache2 package
    apt:
      name: apache2
      state: latest

   # Task 3 
  - name: add php support for apache
    apt:
      name: libapache2-mod-php
      state: latest    
 # You can have multiple tasks in a playbook, ensure you start your new task with -





# You can also use playbook to remove packages from the server

---

- hosts: all
  become: true
  tasks:

  - name: install apache package
    apt:
      name: apache2
      state: absent

  - name: add php support for apache
    apt:
      name: libapache2-mod-php
      state: absent   
   

# How to distinguish between different distributions when running ansible again our servers
# There are some situations that you will have different distros, versions on your server.
# You can use the "when" to settle it.

I have provisioned another server(CentOs in Azure). I want to use my existing playbook to include installation of httpd(CentOs) Apache2(Ubuntu)

The apt in Ubuntu, will change to dnf for CentOs

---

- hosts: all
  become: true
  tasks:

# The command below will run when ansible-distribution is Ubuntu and when ansible_distribution is CentOS. It will 
  - name: install apache and httpd on Ubuntu and Centos
    apt:
      name: apache2
    when: ansible_distribution == "Ubuntu"  

  - name: install httpd on CentOS
    dnf:
      name: httpd
    when: ansible_distribution == "CentOS" 

# Refactoring playbook.that is minimizing your plays with few lines of code
# You can put together all arguments that are using a paticular module
# E.g apt module

---

  - hosts: all
    become: true
    tasks:
       
    - name: installing apache, php support package and updating the repo index
      apt:
        update_cache: yes
        name:
          - apache2    
          - lib-apache2-mod-php
        state: latest
      when: ansible_distribution=="Ubuntu"

    - name: installing httpd, php, package and update repo index on CentOS dist
      dnf:
        update_cache: yes
        name: 
          - httpd
          - php
        state: latest
       when: ansible_distribution== "CentOS"



# You can further reduce the play from 2 to 1
# For the package manager(apt, yum, dnf etc) ansible has a generic package manager name called "package"when run against the servers, it will automatically pick the package manager of that server OS
# You can declare a variable name as well using "{{ variable-name }}" and define the variable name in the inventory file

Example

---

- hosts: all
  become: true
  tasks:

  - name: install apache and php on servers with different distro
    package:
       name:
         - "{{ apache_package }}"
         - "{{ php_package }}"
       state: latest
       update_cache: yes

# You will need to go to the Inventory file where you have the server IPs and define the variable names
e.g
20.51.192.105 apache_package=apache2 php_package=libapache2-mod-php
52.151.194.35 apache_package=apache2 php_package=libapache2-mod-php
13.82.125.79 apache_package=httpd php_package=php

The example above used just 1 play to install apache package on servers with different OS distro
 

# Run Ansible playbook to target specific servers.

# Here you will need to group your servers for easy managment.

# Open your inventory file

[web_servers]
20.51.192.105
13.82.125.79

[db-servers]
52.151.194.35

[file_servers]
13.82.125.79


In the playbook file, you can have some task targets on all host, and your grouped host

---

- hosts: all
  become: true
  tasks:




- hosts: web_servers
  become: true
  tasks: 



- hosts: db_servers
  become: true
  tasks: 



- hosts: file_servers
  become: true
  tasks:


